// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

model Questionnaire {
	id          String   @id @db.Uuid
	title       String
	description String?

	// Relations
	questions   QuestionnaireQuestion[]
	userQuestionnaires UserQuestionnaire[]

	@@map("questionnaires")
}

model Question {
	id      String   @id @db.Uuid
	question String
	type    String
	options Json?

	// Relations
	questionnaires QuestionnaireQuestion[]
	userAnswers    UserAnswer[]

	@@map("questions")
}

model QuestionnaireQuestion {
	questionnaireId String @db.Uuid
	questionId      String @db.Uuid
	orderIn        Int    @default(0)

	// Relations
	questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id])
	question        Question      @relation(fields: [questionId], references: [id])

	@@id([questionnaireId, questionId])
	@@map("questionnaire_questions")
}

model UserQuestionnaire {
	id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
	userId         String    @db.Uuid
	questionnaireId String    @db.Uuid
	status         String    @default("not_started")
	startedAt      DateTime  @default(now()) @db.Timestamptz
	completedAt    DateTime? @db.Timestamptz
	lastUpdatedAt  DateTime  @default(now()) @db.Timestamptz

	// Relations
	questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id])
	answers         UserAnswer[]

	@@unique([userId, questionnaireId])
	@@index([userId])
	@@index([status])
	@@map("user_questionnaires")
}

model UserAnswer {
	id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
	userQuestionnaireId  String    @db.Uuid
	questionId           String    @db.Uuid
	answer              Json
	answeredAt          DateTime  @default(now()) @db.Timestamptz

	// Relations
	userQuestionnaire   UserQuestionnaire @relation(fields: [userQuestionnaireId], references: [id], onDelete: Cascade)
	question            Question          @relation(fields: [questionId], references: [id])

	@@unique([userQuestionnaireId, questionId])
	@@index([userQuestionnaireId])
	@@map("user_answers")
}

model User {
	id    Int     @id @default(autoincrement())
	name  String
	email String  @unique
}